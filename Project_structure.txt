____________________
توضیحات کلی : 
فیچر هایی که در این اپ باید باشد عبارتند از :
1-ثبت نام و ورود تنها با شماره تلفن و دریافت کد
2-فرد میتواند شخص حقیقی باشد یا شخص حقوقی و بسطه به این اطلاعات دریافتی متفاوت است (برای شخص حقیقی کد ملی برای شخص حقوقی کداقتصادی مدنظر است ) 
3- فروشنده میتواند محصول معرفی کند و بعد از معرفی محصول ادمین (یا یوزر با دسترسی مربوطه) محصول را تایید میکند و پس از تایید به نمایش در اپ در می ایند
4-نوتیفیکیشن ثبت فاکتور برای یوزر مربوطه
5-در این اپ روند ثبت فاکتور به این صورت است که خریدار سفارش خود را ثبت میکند و چون تامین کننده هر محصول ممکن است متفاوت باشد برای محصولاتی که تامین کننده متفاوت دارند فاکتور جدا ثبت میشود (برای مثال برای یک خرید سه فاکتور برای سه فروشنده متفاوت ممکن است ثبت شود ) فاکتور خرید ثبت شده به اسم خریدار و به اسم فودین به عنوان فروشنده به صورت اتوماتیک تولید شده و برای تامین کننده مربوطه به صورت اتوماتیک ارسال میشود و بعد از تایید فاکتور توسط تامین کننده فاکتور فروش به صورت اتوماتیک به اسم فروشنده و فودین (خریدار) ثبت میشود
6- کد اقتصادی یا کدملی توسط api های دیگر تایید شوند
7- در زمان پرداخت (قبل از صدور فاکتور) دو گزینه نمایش داده میشود (پرداخت انلاین و پرداخت در محل)
8- دیدن صابقه خرید و فروش
9- در این پلت فرم ما دو قیمت برای محصول داریم یکی قیمت فروشنده (به ما) و یکی قیمت فروش ما به عنوان واسط که هنگام بازبینی محصول توسط ادمین ثبت میشود
10- پس از دریافت بار توسط خریدار ، خریدار باید بتواند تحویل بار را تایید کند و تامین کننده تایید را مشاهده کند
11- هر یوزر کلاس دسترسی دارد 

i am going to use java script and express and postgresql for backend
i want the design pattern where i will implement crud for any model then i will use these functionality to implement the logic of the api
guide me through implementation and architecture of it
_____________________

در این سند، ساختار کامل پروژه اپلیکیشن واسط‌فروشی "Foodin" شامل تمام فیچرها، مدل‌های دیتابیس، معماری بک‌اند با Express و PostgreSQL، و ساختار فرانت‌اند با Vue.js به‌صورت کامل و خوانا ارائه شده است.

---

# ۱. فهرست کامل فیچرها

## 1. احراز هویت و حساب کاربری

* ورود و ثبت‌نام با شماره تلفن و OTP (پیامک)
* استفاده از JWT برای مدیریت سشن‌ها
* انتخاب نوع کاربر: حقیقی (کد ملی) یا حقوقی (کد اقتصادی)
* ویرایش اطلاعات حساب و مدیریت آدرس پیش‌فرض

## 2. مدیریت نقش‌ها و دسترسی‌ها (RBAC)

* تعریف نقش‌های: ادمین، فروشنده، خریدار، پشتیبان
* تخصیص دسترسی به صورت granular (مثلاً product.approve, invoice.view\_all)
* کنترل دسترسی در سطح مسیرها و عملیات

## 3. مدیریت آدرس‌ها

* پشتیبانی از چند آدرس برای هر کاربر
* آدرس خانه، دفتر، انبار
* نشانه‌گذاری آدرس پیش‌فرض و آدرس انبار

## 4. مدیریت محصولات

* CRUD کامل برای فروشنده
* آپلود تصاویر برای هر محصول
* وضعیت‌های "در انتظار تایید"، "تایید شده"، "رد شده"
* تایید محصول توسط ادمین با توضیح
* دسته‌بندی و برچسب‌گذاری محصولات

## 5. قیمت‌گذاری

* قیمت خرید از فروشنده (purchase\_price)
* قیمت فروش به خریدار (sale\_price) که توسط ادمین تنظیم می‌شود
* تعریف کد تخفیف، پیشنهاد ویژه، و کمپین‌ها

## 6. سبد خرید و سیستم فاکتور خودکار

* افزودن محصول به سبد توسط خریدار
* تولید خودکار فاکتور خرید برای هر فروشنده مجزا
* تولید فاکتور فروش توسط سیستم بعد از تایید فروشنده
* پیگیری وضعیت فاکتورها: در انتظار پرداخت، پرداخت شده، لغوشده
* ارسال خودکار فاکتورها به خریدار و فروشنده با نوتیفیکیشن

## 7. روش‌های پرداخت

* درگاه پرداخت بانکی (پرداخت آنلاین)
* پرداخت در محل (COD)
* ذخیره رفرنس تراکنش

## 8. تایید تحویل

* تایید توسط خریدار پس از دریافت کالا
* نمایش وضعیت به فروشنده
* ثبت زمان و توضیح توسط خریدار

## 9. نوتیفیکیشن‌ها

* نوتیفیکیشن محصول، فاکتور، تایید تحویل
* ارسال real-time با WebSocket یا Push
* ذخیره در دیتابیس و خوانده‌شده بودن

## 10. تاریخچه و گزارش‌ها

* مشاهده سفارش‌ها و فاکتورها برای خریدار
* مشاهده فروش‌ها و فاکتورها برای فروشنده
* گزارش‌های مالی روزانه/ماهانه

## 11. اعتبارسنجی اطلاعات

* بررسی صحت کد ملی و کد اقتصادی از طریق APIهای دولتی

## 12. مدیریت کاربران حقوقی

* امکان تعریف زیرکاربر با دسترسی محدود

## 13. ویژگی‌های سیستمی

* لاگ‌برداری
* Health Check endpoint
* محدودسازی نرخ درخواست‌ها (Rate Limiting)

## 14. API

* استفاده از REST API
* مستندسازی با Swagger/OpenAPI

## 15. رابط کاربری

* صفحه خانه، سبد خرید، پروفایل، ورود/ثبت‌نام، داشبورد فروشنده، داشبورد ادمین، جزئیات محصول

---

# ۲. مدل‌های دیتابیس (PostgreSQL)

مدل‌ها با درنظر گرفتن اصول نرمال‌سازی طراحی شده‌اند و قابلیت گسترش دارند.

### نمودار ارتباطی

```
USER --< USER_ROLE
ROLE --< ROLE_PERMISSION
USER --< ADDRESS
USER -- PROFILE -- NATURAL_PERSON / LEGAL_PERSON
USER --< PRODUCT --< PRODUCT_IMAGE, PRODUCT_APPROVAL
USER --< CART --< CART_ITEM
USER --< INVOICE --< INVOICE_ITEM, PAYMENT, DELIVERY_CONFIRMATION, NOTIFICATION
PROMO_CODE --< INVOICE
```

### جداول کلیدی و فیلدهای مهم

* **users**: id, phone, password\_hash, user\_type, is\_active, is\_verified, timestamps
* **profile**: user\_id, first\_name, last\_name, email, customer\_code
* **natural\_person**: profile\_id, national\_id
* **legal\_person**: profile\_id, economic\_code, company\_name
* **roles / permissions / user\_roles / role\_permissions**
* **address**: user\_id, title, full\_address, city, postal\_code, lat/lng, is\_primary, is\_warehouse
* **product**: id, seller\_id, name, description, purchase\_price, status, timestamps
* **product\_approval**: product\_id, admin\_id, sale\_price, approved\_at, notes
* **cart/cart\_items**: buyer\_id, product\_id, quantity
* **invoice / invoice\_items**: type, from\_user, to\_user, total, status, created\_at, promo\_code\_id
* **payment**: invoice\_id, method, amount, ref, paid\_at
* **delivery\_confirmation**: invoice\_id, buyer\_id, confirmed\_at, notes
* **notification**: user\_id, type, message, related\_id, is\_read, created\_at

---

# ۳. ساختار پروژه بک‌اند (Express.js + PostgreSQL)

## معماری سه‌لایه

1. **Repository Layer**: تعامل مستقیم با دیتابیس (کوئری‌ها)
2. **Service Layer**: منطق کسب‌وکار
3. **Controller Layer**: دریافت و پاسخ به درخواست‌ها

## ساختار پوشه

```
src/
├── config/               ← اتصال به PostgreSQL
├── models/               ← تعریف مدل‌ها (type یا interface)
├── migrations/           ← فایل‌های مایگریشن SQL یا با node-pg-migrate
├── repositories/         ← دسترسی به داده‌ها (CRUD)
├── services/             ← منطق بیزینسی
├── controllers/          ← دریافت درخواست از کاربر
├── routes/               ← تعریف مسیرهای API
├── middlewares/          ← هندل خطا، احراز هویت، rate limiter
├── utils/                ← توابع کمکی مثل ApiError
├── app.js                ← راه‌اندازی Express
└── server.js             ← اجرای سرور
```

---

# ۴. ساختار پروژه فرانت‌اند (Vue.js)

## ابزارها

* Vue 3 + Pinia + Vue Router + TailwindCSS
* پیشنهاد: استفاده از Vite یا Nuxt

## ساختار پوشه

```
src/
├── assets/           ← تصاویر، فونت‌ها، استایل‌ها
├── components/       ← اجزای قابل استفاده مجدد (ProductCard, Navbar)
├── layouts/          ← ساختار صفحات
├── pages/            ← صفحات اصلی
├── router/           ← تعریف مسیرهای Vue Router
├── store/            ← مدیریت وضعیت با Pinia
├── services/         ← تعامل با API (axios)
├── utils/            ← توابع کمکی
└── App.vue
```

## صفحات کلیدی

* Home: دسته‌بندی، سرچ، لیست محصولات
* Cart: مدیریت سبد خرید، انتخاب روش پرداخت، نمایش هشدار چند فاکتور
* Profile: مشاهده اطلاعات کاربر، آدرس‌ها، سفارش‌ها، تایید تحویل
* Auth: ورود با شماره و OTP، انتخاب نوع شخص، ورود کد ملی/اقتصادی
* Seller Dashboard: مدیریت محصولات و سفارش‌ها، تایید فاکتور، گزارش‌ها
* Admin Panel: تایید محصولات و فاکتورها، گزارشات مالی، مدیریت دسترسی‌ها
* Product Detail: تصاویر، قیمت، فروشنده، نظرات، امتیازدهی

## امکانات UI/UX

* واکنش‌گرا با TailwindCSS
* حالت تاریک/روشن
* Toast Notification برای خطا/موفقیت
* اسکرول بی‌نهایت
* پشتیبانی از چندزبانگی (i18n)

---

# ۵. پیشنهاد پیاده‌سازی گام‌به‌گام

## Backend

1. راه‌اندازی Express + اتصال به PostgreSQL
2. تعریف مایگریشن‌ها با node-pg-migrate یا SQL
3. پیاده‌سازی Repository → Service → Controller
4. تنظیم JWT, errorHandler, rate limiter, logging
5. مستندسازی API با Swagger

## Frontend

1. راه‌اندازی Vue 3 با Vite
2. طراحی layout اصلی و صفحه Home
3. پیاده‌سازی Auth با OTP
4. اتصال به APIها با axios + store
5. طراحی سبد خرید و صفحات سفارش
6. پیاده‌سازی پنل فروشنده و ادمین

---

این ساختار به‌گونه‌ای طراحی شده که توسعه‌پذیر، تست‌پذیر و مقیاس‌پذیر باشد، و می‌تواند به‌عنوان پایه‌ای محکم برای پیاده‌سازی پروژه Foodin مورد استفاده قرار گیرد.


till here i implemented above features 
now we need several things 
first i should implement endpoint that gives me pdf of invoice with revelat information -> it can be done in both frontend and backend 
here i will write prompt helper :
""""
consider that the base of the project structure is as follow :

Routes :

all endpoints

controllers:

Handle HTTP request/response
Perform input validation (through middleware)
Integrate authentication/authorization middleware
Call appropriate services
Handle errors through middleware

Services:

Contain business logic
Handle data manipulation
Manage complex operations
Use dependency injection for repositories and other services

Repositories:

Handle all direct model/database interactions
Provide clean data access interfaces
Encapsulate persistence logic
Return properly mapped entities or data transfer objects
Maintain consistency in data operations
Follow repository pattern conventions

validation :
Handle schema and related stuff

middleware :
Handle permission and related stuff

database : postgressql + sequilize

documentatoin : swagger
""""